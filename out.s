    # this assembly generated by the cs257 code generator
.globl _start
_start:
    callq main
    # taking main's return value and putting it in %rbx to act as program exit code
    movq %rax, %rbx
    # 1 is the linux interrupt code for exit
    movq $1, %rax
    # passing control to the kernel
    int $128
longfunc:
    # function prologue for longfunc
    pushq %rbp
    movq %rsp, %rbp
    # pushing callee-saved registers for start of longfunc
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    movq $1, %rbx
    add $0, %rbx
    movq $1, %rcx
    add $0, %rcx
    movq $1, %rdx
    add $0, %rdx
    movq $1, %rsi
    add $0, %rsi
    movq $1, %r8
    add $0, %r8
    movq $1, %r9
    add $0, %r9
    movq $1, %r10
    add $0, %r10
    movq $1, %r11
    add $0, %r11
    movq $1, %r12
    add $0, %r12
    movq $1, %r13
    add $0, %r13
    movq $1, %r14
    add $0, %r14
    movq $1, %r15
    add $0, %r15
    sub $8, %rsp
    movq $1, -48(%rbp)
    add $0, -48(%rbp)
    sub $8, %rsp
    movq $1, -56(%rbp)
    add $0, -56(%rbp)
    sub $8, %rsp
    movq $1, -64(%rbp)
    add $0, -64(%rbp)
    sub $8, %rsp
    movq $1, -72(%rbp)
    add $0, -72(%rbp)
    sub $8, %rsp
    movq $1, -80(%rbp)
    add $0, -80(%rbp)
    sub $8, %rsp
    movq $1, -88(%rbp)
    add $0, -88(%rbp)
    sub $8, %rsp
    movq $1, -96(%rbp)
    add $0, -96(%rbp)
    sub $8, %rsp
    movq $1, -104(%rbp)
    add $0, -104(%rbp)
    sub $8, %rsp
    movq $1, -112(%rbp)
    add $0, -112(%rbp)
    sub $8, %rsp
    movq $1, -120(%rbp)
    add $0, -120(%rbp)
    sub $8, %rsp
    movq $1, -128(%rbp)
    add $0, -128(%rbp)
    sub $8, %rsp
    movq $1, -136(%rbp)
    add $0, -136(%rbp)
    sub $8, %rsp
    movq $1, -144(%rbp)
    add $0, -144(%rbp)
    sub $8, %rsp
    movq $1, -152(%rbp)
    add $0, -152(%rbp)
    sub $8, %rsp
    movq %rbx, -160(%rbp)
    add %rcx, -160(%rbp)
    movq -160(%rbp), %rbx
    add %rdx, %rbx
    movq %rbx, %rcx
    add %rsi, %rcx
    movq %rcx, %rbx
    add %r8, %rbx
    movq %rbx, %rcx
    add %r9, %rcx
    movq %rcx, %rbx
    add %r10, %rbx
    movq %rbx, %rcx
    add %r11, %rcx
    movq %rcx, %rbx
    add %r12, %rbx
    movq %rbx, %rcx
    add %r13, %rcx
    movq %rcx, %rbx
    add %r14, %rbx
    movq %rbx, %rcx
    add %r15, %rcx
    movq %rcx, %rbx
    add -48(%rbp), %rbx
    movq %rbx, %rcx
    add -56(%rbp), %rcx
    movq %rcx, %rbx
    add -64(%rbp), %rbx
    movq %rbx, %rcx
    add -72(%rbp), %rcx
    movq %rcx, %rbx
    add -80(%rbp), %rbx
    movq %rbx, %rcx
    add -88(%rbp), %rcx
    movq %rcx, %rbx
    add -96(%rbp), %rbx
    movq %rbx, %rcx
    add -104(%rbp), %rcx
    movq %rcx, %rbx
    add -112(%rbp), %rbx
    movq %rbx, %rcx
    add -120(%rbp), %rcx
    movq %rcx, %rbx
    add -128(%rbp), %rbx
    movq %rbx, %rcx
    add -136(%rbp), %rcx
    movq %rcx, %rbx
    add -144(%rbp), %rbx
    movq %rbx, %rcx
    add -152(%rbp), %rcx
    # sticking return value into %rax
    movq %rcx, %rax
    # popping callee-saved registers
    movq -40(%rbp), %r15
    movq -32(%rbp), %r14
    movq -24(%rbp), %r13
    movq -16(%rbp), %r12
    movq -8(%rbp), %rbx
    # tearing down the stack and returning
    leaveq
    retq
main:
    # function prologue for main
    pushq %rbp
    movq %rsp, %rbp
    # pushing callee-saved registers for start of main
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    # pushing caller-saved registers before call to longfunc
    pushq %rcx
    pushq %rdx
    pushq %rsi
    pushq %r8
    pushq %r9
    pushq %r10
    pushq %r11
    # calling longfunc
    callq longfunc
    # popping caller-saved registers after call to longfunc
    popq %r11
    popq %r10
    popq %r9
    popq %r8
    popq %rsi
    popq %rdx
    popq %rcx
    # saving the value returned from longfunc
    movq %rax, %rbx
    # sticking return value into %rax
    movq %rbx, %rax
    # popping callee-saved registers
    movq -40(%rbp), %r15
    movq -32(%rbp), %r14
    movq -24(%rbp), %r13
    movq -16(%rbp), %r12
    movq -8(%rbp), %rbx
    # tearing down the stack and returning
    leaveq
    retq
